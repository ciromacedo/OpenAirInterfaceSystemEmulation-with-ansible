---
-   hosts: 127.0.0.1
    connection: local
    become: yes
    remote_user: root
    vars:
        docker_custom_subnet_network: '192.188.2.0/24'
        docker_custom_network_name: 'srsLTE'
        ip_address_EPC: '192.188.2.2'
        ip_address_eNB: '192.188.2.253'
        ip_address_OAISIM_UE: '192.188.2.254'
        EPC_container_name: 'epc'
        srslte_epc_image_name: 'laboraufg/epc-srslte'
        oaisim_enb_image_name: 'laboraufg/enb-openairsim'
        oaisim_ue_image_name: 'laboraufg/ue-openairsim'
        UE_folder_name_container_name: '/root/ue/'
        ENB_folder_name_container_name: '/root/enb/'
        BASE_DIR_INSTALL: '/root/oaisim-4g-install'
        force_docker_reinstall: 'true'
        hss_host_url: 'hss.openair4G.eur'
        remove_old_install: 'true'
        ENB_container_name: 'enb'
        UE_container_name: 'ue'
        HPLMN : "20893"
        USIM_API_K : "8baf473f2f8fd09487cccbd7097c6862"
        OPC : "e734f8734007d6c5ce7a0508809e7e9c"
        clear_file_instalation: 'false'
        
        user_equiments:
            - { ue_id: UE0 ,   msin: '0000000001' }
            - { ue_id: UE1 ,   msin: '0000000002' }
            - { ue_id: UE2 ,   msin: '0000000003' }
            - { ue_id: UE3 ,   msin: '0000000004' }
            - { ue_id: UE4 ,   msin: '0000000005' }
            - { ue_id: UE5 ,   msin: '0000000006' }
            - { ue_id: UE6 ,   msin: '0000000007' }
    tasks:
        - fail: 
            msg: "'physical_network_interface' not found, this parameter is required!"
          when: physical_network_interface == ''

        - name  : Environment validation!
          assert:
            that:
              - ansible_memtotal_mb >= 1048
            msg: "Minimum memory requirements in the deployment environment is 4GB! Operation failed!"

        - name  : Remove old instalation Dir
          shell :  |
                sudo rm -rf {{ BASE_DIR_INSTALL }}

        - name  : Create dir instalation
          file  :
            path: "{{ BASE_DIR_INSTALL }}"
            state: directory

        - name  : OpenAirInterface UE configuration - Build ue_eurecom_test_sfr.conf 1/2
          copy:
            dest: "{{ BASE_DIR_INSTALL }}/ue_eurecom_test_sfr.conf"
            content: |
                # List of known PLMNS
                PLMN: {
                    PLMN0: {
                        FULLNAME="Test network";
                        SHORTNAME="OAI4G";
                        MNC="01";
                        MCC="001";

                    };
                    PLMN1: {
                        FULLNAME="SFR France";
                        SHORTNAME="SFR";
                        MNC="10";
                        MCC="208";

                    };
                    PLMN2: {
                        FULLNAME="SFR France";
                        SHORTNAME="SFR";
                        MNC="11";
                        MCC="208";
                    };
                    PLMN3: {
                        FULLNAME="SFR France";
                        SHORTNAME="SFR";
                        MNC="13";
                        MCC="208";
                    };
                    PLMN4: {
                        FULLNAME="OAI LTEBOX";
                        SHORTNAME="OAIALU";
                        MNC="93";
                        MCC="208";
                    };
                    PLMN5: {
                        FULLNAME="T-Mobile USA";
                        SHORTNAME="T-Mobile";
                        MNC="280";
                        MCC="310";
                    };
                    PLMN6: {
                        FULLNAME="FICTITIOUS USA";
                        SHORTNAME="FICTITIO";
                        MNC="028";
                        MCC="310";
                    };
                    PLMN7: {
                        FULLNAME="Vodafone Italia";
                        SHORTNAME="VODAFONE";
                        MNC="10";
                        MCC="222";
                    };
                    PLMN8: {
                        FULLNAME="Vodafone Spain";
                        SHORTNAME="VODAFONE";
                        MNC="01";
                        MCC="214";
                    };
                    PLMN9: {
                        FULLNAME="Vodafone Spain";
                        SHORTNAME="VODAFONE";
                        MNC="06";
                        MCC="214";
                    };
                    PLMN10: {
                        FULLNAME="Vodafone Germ";
                        SHORTNAME="VODAFONE";
                        MNC="02";
                        MCC="262";
                    };
                    PLMN11: {
                        FULLNAME="Vodafone Germ";
                        SHORTNAME="VODAFONE";
                        MNC="04";
                        MCC="262";
                    };
                };

        - name  : OpenAirInterface UE configuration - Build ue_eurecom_test_sfr.conf  2/2
          blockinfile:
            path: /{{ BASE_DIR_INSTALL }}/ue_eurecom_test_sfr.conf
            block: |
                {{ item.ue_id }}:
                  {
                        USER: {
                            IMEI="356113022094149";
                            MANUFACTURER="EURECOM";
                            MODEL="LTE Android PC";
                            PIN="0000";
                        };
                        SIM: {
                            MSIN="{{ item.msin }}";
                            USIM_API_K="{{ USIM_API_K }}";
                            OPC="{{ OPC }}";
                            MSISDN="33638020004";
                        };
                        HPLMN= "{{ HPLMN }}";
                        UCPLMN_LIST = ();
                        OPLMN_LIST = ("00101", "20810", "20811", "20813", "20893", "310280", "310028");
                        OCPLMN_LIST = ("22210", "21401", "21406", "26202", "26204");
                        FPLMN_LIST = ();
                        EHPLMN_LIST= ();
                    };
            marker: "# {mark} User Equipment {{ item.ue_id }}"
          loop: "{{ user_equiments }}"
          loop_control:
            index_var: ue_idx

        - name  : OpenAirInterface UE configuration - Build ue.nfapi.conf 
          copy:
            dest: "{{ BASE_DIR_INSTALL }}/ue.nfapi.conf"
            content: |
                log_config = {
                  global_log_level                      ="info";
                  global_log_verbosity                  ="medium";
                  hw_log_level                          ="info";
                  hw_log_verbosity                      ="medium";
                  phy_log_level                         ="info";
                  phy_log_verbosity                     ="medium";
                  mac_log_level                         ="info";
                  mac_log_verbosity                     ="medium";
                  rlc_log_level                         ="info";
                  rlc_log_verbosity                     ="medium";
                  pdcp_log_level                        ="info";
                  pdcp_log_verbosity                    ="medium";
                  rrc_log_level                         ="info";
                  rrc_log_verbosity                     ="full";
                };


                L1s = (
                        {
                        num_cc = 1;
                        tr_n_preference = "nfapi";
                        local_n_if_name  = "{{ physical_network_interface }}";
                        remote_n_address = "{{ ip_address_eNB }}";
                        local_n_address  = "{{ ip_address_OAISIM_UE }}";
                        local_n_portc    = 50000;
                        remote_n_portc   = 50001;
                        local_n_portd    = 50010;
                        remote_n_portd   = 50011;
                        }  
                );

                RUs = (
                    {		  
                      local_rf       = "yes"
                      nb_tx          = 1
                      nb_rx          = 1
                      att_tx         = 90
                      att_rx         = 0;
                      bands          = [7,38,42,43];
                      max_pdschReferenceSignalPower = -27;
                      max_rxgain                    = 125;
                    }		      
                );

        - name  : OpenAirInterface eNB configuration - Build rcc.band7.tm1.nfapi.conf
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/rcc.band7.tm1.nfapi.conf"
            content: |
                Active_eNBs = ( "Computer Networks and Distributed Systems LABORAtory https://labora.inf.ufg.br - Brazil");
                # Asn1_verbosity, choice in: none, info, annoying
                Asn1_verbosity = "none";

                eNBs =
                (
                {
                    ////////// Identification parameters:
                    eNB_ID    =  0xe00;

                    cell_type =  "CELL_MACRO_ENB";

                    eNB_name  =  "Computer Networks and Distributed Systems LABORAtory https://labora.inf.ufg.br - Brazil";

                    // Tracking area code, 0x0000 and 0xfffe are reserved values
                    tracking_area_code = 1;

                    plmn_list = ( { mcc = 724; mnc = 51; mnc_length = 2; } );

                    tr_s_preference     = "local_mac"

                    ////////// Physical parameters:

                    component_carriers = (
                    {
                    node_function                       = "3GPP_eNODEB";
                    node_timing                         = "synch_to_ext_device";
                    node_synch_ref                      = 0;
                    frame_type					                = "FDD";
                    tdd_config 					                = 3;
                    tdd_config_s            			      = 0;
                    prefix_type             			      = "NORMAL";
                    eutra_band              			      = 7;
                    downlink_frequency      			      = 2685000000L;
                    uplink_frequency_offset 			      = -120000000;
                    Nid_cell					                  = 0;
                    N_RB_DL                 			      = 50;
                    Nid_cell_mbsfn          			      = 0;
                    nb_antenna_ports                    = 1;
                    nb_antennas_tx          			      = 1;
                    nb_antennas_rx          			      = 1;
                    tx_gain                             = 90;
                    rx_gain                             = 125;
                    pbch_repetition                     = "FALSE";
                    prach_root              			      = 0;
                    prach_config_index      			      = 0;
                    prach_high_speed        			      = "DISABLE";
                    prach_zero_correlation  			      = 1;
                    prach_freq_offset       			      = 2;
                    pucch_delta_shift       			      = 1;
                    pucch_nRB_CQI           			      = 0;
                    pucch_nCS_AN            			      = 0;
                    pucch_n1_AN             			      = 0;
                    pdsch_referenceSignalPower 			    = -27;
                    pdsch_p_b                  			    = 0;
                    pusch_n_SB                 			    = 1;
                    pusch_enable64QAM          			    = "DISABLE";
                    pusch_hoppingMode                   = "interSubFrame";
                    pusch_hoppingOffset                 = 0;
                    pusch_groupHoppingEnabled  			    = "ENABLE";
                    pusch_groupAssignment      			    = 0;
                    pusch_sequenceHoppingEnabled		   	= "DISABLE";
                    pusch_nDMRS1                        = 1;
                    phich_duration                      = "NORMAL";
                    phich_resource                      = "ONESIXTH";
                    srs_enable                          = "DISABLE";
                    /*  srs_BandwidthConfig             =;
                    srs_SubframeConfig                  =;
                    srs_ackNackST                       =;
                    srs_MaxUpPts                        =;*/

                    pusch_p0_Nominal                    = -96;
                    pusch_alpha                         = "AL1";
                    pucch_p0_Nominal                    = -104;
                    msg3_delta_Preamble                 = 6;
                    pucch_deltaF_Format1                = "deltaF2";
                    pucch_deltaF_Format1b               = "deltaF3";
                    pucch_deltaF_Format2                = "deltaF0";
                    pucch_deltaF_Format2a               = "deltaF0";
                    pucch_deltaF_Format2b		    	      = "deltaF0";

                    rach_numberOfRA_Preambles           = 64;
                    rach_preamblesGroupAConfig          = "DISABLE";
                    /*
                    rach_sizeOfRA_PreamblesGroupA       = ;
                    rach_messageSizeGroupA              = ;
                    rach_messagePowerOffsetGroupB       = ;
                    */
                    rach_powerRampingStep                       = 4;
                    rach_preambleInitialReceivedTargetPower     = -108;
                    rach_preambleTransMax                       = 10;
                    rach_raResponseWindowSize                   = 10;
                    rach_macContentionResolutionTimer           = 48;
                    rach_maxHARQ_Msg3Tx                         = 4;

                    pcch_default_PagingCycle                    = 128;
                    pcch_nB                                     = "oneT";
                    bcch_modificationPeriodCoeff			          = 2;
                    ue_TimersAndConstants_t300			            = 1000;
                    ue_TimersAndConstants_t301			            = 1000;
                    ue_TimersAndConstants_t310			            = 1000;
                    ue_TimersAndConstants_t311			            = 10000;
                    ue_TimersAndConstants_n310			            = 20;
                    ue_TimersAndConstants_n311			            = 1;
                    ue_TransmissionMode                         = 1;

                    //Parameters for SIB18
                    rxPool_sc_CP_Len                            = "normal";
                    rxPool_sc_Period                            = "sf40";
                    rxPool_data_CP_Len                          = "normal";
                    rxPool_ResourceConfig_prb_Num               = 20;
                    rxPool_ResourceConfig_prb_Start             = 5;
                    rxPool_ResourceConfig_prb_End               = 44;
                    rxPool_ResourceConfig_offsetIndicator_present = "prSmall";
                    rxPool_ResourceConfig_offsetIndicator_choice  = 0;
                    rxPool_ResourceConfig_subframeBitmap_present  = "prBs40";
                    rxPool_ResourceConfig_subframeBitmap_choice_bs_buf  = "00000000000000000000";
                    rxPool_ResourceConfig_subframeBitmap_choice_bs_size = 5;
                    rxPool_ResourceConfig_subframeBitmap_choice_bs_bits_unused  = 0;
                /*    rxPool_dataHoppingConfig_hoppingParameter                 = 0;
                    rxPool_dataHoppingConfig_numSubbands                        = "ns1";
                    rxPool_dataHoppingConfig_rbOffset                           = 0;
                    rxPool_commTxResourceUC-ReqAllowed                          = "TRUE";
                */
                    // Parameters for SIB19
                    discRxPool_cp_Len                                           = "normal"
                    discRxPool_discPeriod                                       = "rf32"
                    discRxPool_numRetx                                          = 1;
                    discRxPool_numRepetition                                    = 2;
                    discRxPool_ResourceConfig_prb_Num                           = 5;
                    discRxPool_ResourceConfig_prb_Start                         = 3;
                    discRxPool_ResourceConfig_prb_End                           = 21;
                    discRxPool_ResourceConfig_offsetIndicator_present           = "prSmall";
                    discRxPool_ResourceConfig_offsetIndicator_choice            = 0;
                    discRxPool_ResourceConfig_subframeBitmap_present            = "prBs40";
                    discRxPool_ResourceConfig_subframeBitmap_choice_bs_buf      = "f0ffffffff";
                    discRxPool_ResourceConfig_subframeBitmap_choice_bs_size     = 5;
                    discRxPool_ResourceConfig_subframeBitmap_choice_bs_bits_unused  = 0;

                    }
                    );


                    srb1_parameters :
                    {
                        # timer_poll_retransmit = (ms) [5, 10, 15, 20,... 250, 300, 350, ... 500]
                        timer_poll_retransmit    = 80;

                        # timer_reordering = (ms) [0,5, ... 100, 110, 120, ... ,200]
                        timer_reordering         = 35;

                        # timer_reordering = (ms) [0,5, ... 250, 300, 350, ... ,500]
                        timer_status_prohibit    = 0;

                        # poll_pdu = [4, 8, 16, 32 , 64, 128, 256, infinity(>10000)]
                        poll_pdu                 =  4;

                        # poll_byte = (kB) [25,50,75,100,125,250,375,500,750,1000,1250,1500,2000,3000,infinity(>10000)]
                        poll_byte                =  99999;

                        # max_retx_threshold = [1, 2, 3, 4 , 6, 8, 16, 32]
                        max_retx_threshold       =  4;
                    }

                    # ------- SCTP definitions
                    SCTP :
                    {
                        # Number of streams to use in input/output
                        SCTP_INSTREAMS  = 2;
                        SCTP_OUTSTREAMS = 2;
                    };


                    ////////// MME parameters:
                    mme_ip_address      = ( {   ipv4       = "{{ ip_address_EPC }}";
                                                ipv6       = "192:168:30::17";
                                                active     = "yes";
                                                preference = "ipv4";
                                            }
                                        );

                    NETWORK_INTERFACES :
                    {
                        ENB_INTERFACE_NAME_FOR_S1_MME            = "{{ physical_network_interface }}";
                        ENB_IPV4_ADDRESS_FOR_S1_MME              = "{{ ip_address_eNB }}";
                        ENB_INTERFACE_NAME_FOR_S1U               = "{{ physical_network_interface }}";
                        ENB_IPV4_ADDRESS_FOR_S1U                 = "{{ ip_address_eNB }}";
                        ENB_PORT_FOR_S1U                         = 2152; # Spec 2152
                        ENB_IPV4_ADDRESS_FOR_X2C                 = "{{ ip_address_eNB }}";
                        ENB_PORT_FOR_X2C                         = 36422; # Spec 36422
                        
                    };
                }
                );

                MACRLCs = (
                    {
                    num_cc = 1;
                        local_s_if_name  = "lo:";			  
                        remote_s_address = "{{ ip_address_OAISIM_UE }}";
                        local_s_address  = "{{ ip_address_eNB }}"; 
                        local_s_portc    = 50001;	
                        remote_s_portc   = 50000;
                        local_s_portd    = 50011;	
                        remote_s_portd   = 50010;
                        tr_s_preference = "nfapi";
                        tr_n_preference = "local_RRC";
                        }  
                );

                RUs = (
                    {
                        local_rf       = "yes"
                        nb_tx          = 1
                        nb_rx          = 1
                        att_tx         = 20
                        att_rx         = 0;
                        bands          = [38];
                        max_pdschReferenceSignalPower = -23;
                        max_rxgain                    = 116;
                        eNB_instances  = [0];
                    }
                );


                THREAD_STRUCT = (
                {
                    #three config for level of parallelism "PARALLEL_SINGLE_THREAD", "PARALLEL_RU_L1_SPLIT", or "PARALLEL_RU_L1_TRX_SPLIT"
                    parallel_config    = "PARALLEL_RU_L1_TRX_SPLIT";
                    #two option for worker "WORKER_DISABLE" or "WORKER_ENABLE"
                    worker_config      = "WORKER_ENABLE";
                }
                );

                log_config =
                    {
                    global_log_level                      ="info";
                    global_log_verbosity                  ="medium";
                    hw_log_level                          ="info";
                    hw_log_verbosity                      ="medium";
                    phy_log_level                         ="info";
                    phy_log_verbosity                     ="medium";
                    mac_log_level                         ="info";
                    mac_log_verbosity                     ="high";
                    rlc_log_level                         ="info";
                    rlc_log_verbosity                     ="medium";
                    pdcp_log_level                        ="info";
                    pdcp_log_verbosity                    ="medium";
                    rrc_log_level                         ="info";
                    rrc_log_verbosity                     ="medium";
                };

        - name  : srsLTE configuration - Build epc.conf file
          copy:
            dest: "{{ BASE_DIR_INSTALL }}/epc.conf"
            content: |
              #####################################################################
              #                   srsEPC configuration file
              #####################################################################

              #####################################################################
              # MME configuration
              #
              # mme_code:         8-bit MME code identifies the MME within a group.
              # mme_group:        16-bit MME group identifier.
              # tac:              16-bit Tracking Area Code.
              # mcc:              Mobile Country Code
              # mnc:              Mobile Network Code
              # apn:		          Set Access Point Name (APN)
              # mme_bind_addr:    IP bind addr to listen for eNB S1-MME connnections
              # dns_addr:         DNS server address for the UEs
              # encryption_algo:  Preferred encryption algorithm for NAS layer
              #                   (default: EEA0, support: EEA1, EEA2)
              # integrity_algo:   Preferred integrity protection algorithm for NAS
              #                   (default: EIA1, support: EIA1, EIA2 (EIA0 not support)
              # paging_timer:     Value of paging timer in seconds (T3413)
              #
              #####################################################################
              [mme]
              mme_code = 0x1a
              mme_group = 0x0001
              tac = 0x0007
              mcc = 724
              mnc = 51
              mme_bind_addr = {{ ip_address_EPC }}
              apn = srsapn
              dns_addr = 8.8.8.8
              encryption_algo = EEA0
              integrity_algo = EIA1
              paging_timer = 2

              #####################################################################
              # HSS configuration
              #
              # db_file:         Location of .csv file that stores UEs information.
              #
              #####################################################################
              [hss]
              db_file = user_db.csv

              #####################################################################
              # SP-GW configuration
              #
              # gtpu_bind_addr:   GTP-U bind address.
              # sgi_if_addr:      SGi TUN interface IP address.
              # sgi_if_name:      SGi TUN interface name.
              # max_paging_queue: Maximum packets in paging queue (per UE).
              #
              #####################################################################

              [spgw]
              gtpu_bind_addr   = {{ ip_address_EPC }}
              sgi_if_addr      = 172.16.0.1
              sgi_if_name      = srs_spgw_sgi
              max_paging_queue = 100

              ####################################################################
              # PCAP configuration
              #
              # Packets are captured to file in the compact format decoded by
              # the Wireshark s1ap dissector and with DLT 150.
              # To use the dissector, edit the preferences for DLT_USER to
              # add an entry with DLT=150, Payload Protocol=s1ap.
              #
              # enable:   Enable or disable the PCAP.
              # filename: File name where to save the PCAP.
              #
              ####################################################################
              [pcap]
              enable   = false
              filename = /tmp/epc.pcap

              ####################################################################
              # Log configuration
              #
              # Log levels can be set for individual layers. "all_level" sets log
              # level for all layers unless otherwise configured.
              # Format: e.g. s1ap_level = info
              #
              # In the same way, packet hex dumps can be limited for each level.
              # "all_hex_limit" sets the hex limit for all layers unless otherwise
              # configured.
              # Format: e.g. s1ap_hex_limit = 32
              #
              # Logging layers: nas, s1ap, mme_gtpc, spgw_gtpc, gtpu, spgw, hss, all
              # Logging levels: debug, info, warning, error, none
              #
              # filename: File path to use for log output. Can be set to stdout
              #           to print logs to standard output
              #####################################################################
              [log]
              all_level = info
              all_hex_limit = 32
              filename = /tmp/epc.log

              #nas_level = debug
              #s1ap_level = debug
              #mme_gtpc_level = debug
              #spgw_gtpc_level = debug
              #gtpu_level = debug
              #spgw_level = debug
              #hss_level = debug

        - name  : srsLTE configuration - Build enb.conf file
          copy:
            dest: "{{ BASE_DIR_INSTALL }}/enb.conf"
            content: |
              #####################################################################
              #####################################################################
              #                   srsENB configuration file
              #####################################################################

              #####################################################################
              # eNB configuration
              #
              # enb_id:         20-bit eNB identifier.
              # cell_id:        8-bit cell identifier.
              # tac:            16-bit Tracking Area Code.
              # mcc:            Mobile Country Code
              # mnc:            Mobile Network Code
              # mme_addr:       IP address of MME for S1 connnection
              # gtp_bind_addr:  Local IP address to bind for GTP connection
              # s1c_bind_addr:  Local IP address to bind for S1AP connection
              # n_prb:          Number of Physical Resource Blocks (6,15,25,50,75,100)
              # tm:             Transmission mode 1-4 (TM1 default)
              # nof_ports:      Number of Tx ports (1 port default, set to 2 for TM2/3/4)
              #
              #####################################################################
              [enb]
              enb_id = 0x579
              cell_id = 0x2
              phy_cell_id = 1
              tac = 0x0007
              mcc = 724
              mnc = 51
              mme_addr = {{ ip_address_EPC }}
              gtp_bind_addr = {{ ip_address_eNB }}
              s1c_bind_addr = {{ ip_address_eNB }}
              n_prb = 50
              #tm = 4
              #nof_ports = 2

              #####################################################################
              # eNB configuration files
              #
              # sib_config:  SIB1, SIB2 and SIB3 configuration file
              # note: when enabling mbms, use the sib.conf.mbsfn configuration file which includes SIB13
              # rr_config:   Radio Resources configuration file
              # drb_config:  DRB configuration file
              #####################################################################
              [enb_files]
              sib_config = sib.conf
              rr_config  = rr.conf
              drb_config = drb.conf

              #####################################################################
              # RF configuration
              #
              # dl_earfcn: EARFCN code for DL
              # tx_gain: Transmit gain (dB).
              # rx_gain: Optional receive gain (dB). If disabled, AGC if enabled
              #
              # Optional parameters:
              # dl_freq:            Override DL frequency corresponding to dl_earfcn
              # ul_freq:            Override UL frequency corresponding to dl_earfcn (must be set if dl_freq is set)
              # device_name:        Device driver family. Supported options: "auto" (uses first found), "UHD" or "bladeRF"
              # device_args:        Arguments for the device driver. Options are "auto" or any string.
              #                     Default for UHD: "recv_frame_size=9232,send_frame_size=9232"
              #                     Default for bladeRF: ""
              # #time_adv_nsamples: Transmission time advance (in number of samples) to compensate for RF delay
              #                     from antenna to timestamp insertion.
              #                     Default "auto". B210 USRP: 100 samples, bladeRF: 27.
              # burst_preamble_us:  Preamble length to transmit before start of burst.
              #                     Default "auto". B210 USRP: 400 us, bladeRF: 0 us.
              #####################################################################
              [rf]
              dl_earfcn = 2525
              tx_gain = 80
              rx_gain = 40

              #device_name = auto

              # For best performance in 2x2 MIMO and >= 15 MHz use the following device_args settings:
              #     USRP B210: pass num_recv_frames=64,num_send_frames=64

              #device_args = auto
              #time_adv_nsamples = auto
              #burst_preamble_us = auto


              #####################################################################
              # MAC-layer packet capture configuration
              #
              # Packets are captured to file in the compact format decoded by
              # the Wireshark mac-lte-framed dissector and with DLT 147.
              # To use the dissector, edit the preferences for DLT_USER to
              # add an entry with DLT=147, Payload Protocol=mac-lte-framed.
              # For more information see: https://wiki.wireshark.org/MAC-LTE
              #
              # Please note that this setting will by default only capture MAC
              # frames on dedicated channels, and not SIB.  You have to build with
              # WRITE_SIB_PCAP enabled in srsenb/src/stack/mac/mac.cc if you want
              # SIB to be part of the MAC pcap file.
              #
              # enable:   Enable MAC layer packet captures (true/false)
              # filename: File path to use for packet captures
              #####################################################################
              [pcap]
              enable = false
              filename = /tmp/enb.pcap

              #####################################################################
              # Log configuration
              #
              # Log levels can be set for individual layers. "all_level" sets log
              # level for all layers unless otherwise configured.
              # Format: e.g. phy_level = info
              #
              # In the same way, packet hex dumps can be limited for each level.
              # "all_hex_limit" sets the hex limit for all layers unless otherwise
              # configured.
              # Format: e.g. phy_hex_limit = 32
              #
              # Logging layers: phy, mac, rlc, pdcp, rrc, nas, gtpu, usim, all
              # Logging levels: debug, info, warning, error, none
              #
              # filename: File path to use for log output. Can be set to stdout
              #           to print logs to standard output
              # file_max_size: Maximum file size (in kilobytes). When passed, multiple files are created.
              #                If set to negative, a single log file will be created.
              #####################################################################
              [log]
              all_level = debug
              all_hex_limit = 32
              filename = /tmp/enb.log
              file_max_size = -1

              [gui]
              enable = false

              #####################################################################
              # Scheduler configuration options
              #
              # pdsch_mcs:         Optional fixed PDSCH MCS (ignores reported CQIs if specified)
              # pdsch_max_mcs:     Optional PDSCH MCS limit
              # pusch_mcs:         Optional fixed PUSCH MCS (ignores reported CQIs if specified)
              # pusch_max_mcs:     Optional PUSCH MCS limit
              # #nof_ctrl_symbols: Number of control symbols
              #
              #####################################################################
              [scheduler]
              #pdsch_mcs        = -1
              #pdsch_max_mcs    = -1
              #pusch_mcs        = -1
              pusch_max_mcs     = 16
              nof_ctrl_symbols  = 3

              #####################################################################
              # eMBMS configuration options
              #
              # enable:               Enable MBMS transmission in the eNB
              # m1u_multiaddr:        Multicast addres the M1-U socket will register to
              # m1u_if_addr:          Address of the inteferface the M1-U interface will listen for multicast packets.
              #
              #####################################################################
              #enable = false
              #m1u_multiaddr = 239.255.0.1
              #m1u_if_addr = 127.0.1.201

              #####################################################################
              # Expert configuration options
              #
              # pusch_max_its:        Maximum number of turbo decoder iterations (Default 4)
              # pusch_8bit_decoder:   Use 8-bit for LLR representation and turbo decoder trellis computation (Experimental)
              # nof_phy_threads:      Selects the number of PHY threads (maximum 4, minimum 1, default 2)
              # metrics_period_secs:  Sets the period at which metrics are requested from the eNB.
              # metrics_csv_enable:   Write eNB metrics to CSV file.
              # metrics_csv_filename: File path to use for CSV metrics.
              # pregenerate_signals:  Pregenerate uplink signals after attach. Improves CPU performance.
              # tx_amplitude:         Transmit amplitude factor (set 0-1 to reduce PAPR)
              # link_failure_nof_err: Number of PUSCH failures after which a radio-link failure is triggered.
              #                       a link failure is when SNR<0 and CRC=KO
              # max_prach_offset_us:  Maximum allowed RACH offset (in us)
              # eea_pref_list:        Ordered preference list for the selection of encryption algorithm (EEA) (default: EEA0, EEA2, EEA1).
              # eia_pref_list:        Ordered preference list for the selection of integrity algorithm (EIA) (default: EIA2, EIA1, EIA0).
              #
              #####################################################################
              [expert]
              #pusch_max_its        = 8 # These are half iterations
              #pusch_8bit_decoder   = false
              #nof_phy_threads      = 3
              #metrics_period_secs  = 1
              #metrics_csv_enable   = false
              #metrics_csv_filename = /tmp/enb_metrics.csv
              #pregenerate_signals  = false
              #tx_amplitude         = 0.6
              #link_failure_nof_err = 50
              #rrc_inactivity_timer = 60000
              #max_prach_offset_us  = 30
              eea_pref_list = EEA0, EEA1, EEA2
              eia_pref_list = EIA1, EIA2, EIA0

        - name  : srsLTE configuration - Build user_db.csv file
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/user_db.csv"
            content: |
              #
              # .csv to store UE's information in HSS
              # Kept in the following format: "Name,Auth,IMSI,Key,OP_Type,OP,AMF,SQN,QCI,IP_alloc"
              #
              # Name:     Human readable name to help distinguish UE's. Ignored by the HSS
              # Auth:     Authentication algorithm used by the UE. Valid algorithms are XOR
              #           (xor) and MILENAGE (mil)
              # IMSI:     UE's IMSI value
              # Key:      UE's key, where other keys are derived from. Stored in hexadecimal
              # OP_Type:  Operator's code type, either OP or OPc
              # OP/OPc:   Operator Code/Cyphered Operator Code, stored in hexadecimal
              # AMF:      Authentication management field, stored in hexadecimal
              # SQN:      UE's Sequence number for freshness of the authentication
              # QCI:      QoS Class Identifier for the UE's default bearer.
              # IP_alloc: IP allocation stratagy for the SPGW.
              #           With 'dynamic' the SPGW will automatically allocate IPs
              #           With a valid IPv4 (e.g. '172.16.0.2') the UE will have a statically assigned IP.
              #
              # Note: Lines starting by '#' are ignored and will be overwritten
              #ue2, mil,001010123456780,00112233445566778899aabbccddeeff,opc,63bfa50ee6523365ff14c1f45f88737d,8000,000000001234,7,dynamic
              #ue1, xor,001010123456789,00112233445566778899aabbccddeeff,opc,63bfa50ee6523365ff14c1f45f88737d,9001,000000001234,7,dynamic
              #sim0,mil,901700000028080,724d0f31f2259622700437430b7b5c6e,opc,1140620b2805d84b44643bfcfbe6218c,8080,00000028155b,7,dynamic
              #sim1,mil,901700000028081,39b131167cb19955df88a9d1ba8b8650,opc,fd553986cc62edcc53a91610ef8e31eb,8081,0000002808b5,7,dynamic
              #sim2,mil,901700000028082,2e175ced46a8dd09790a8889d99041f0,opc,6a38d1131ec3a6eee307001430c6027b,8082,000000280d94,7,dynamic
              #sim3,mil,901700000028083,ce00662d50b361c3442384ec4dce8718,opc,892deabd195d465cbd9cfc4937222c4c,8083,000000280858,7,dynamic
              #sim4,mil,901700000028084,a191f0aa8e9927aa10d19f9ffbffdae3,opc,b50406aa4a63646d1c49c159006e59f3,8084,000000280845,7,dynamic
              #sim5,mil,901700000028085,39514fdfccbe9295f7d04c2580566fe2,opc,cd28c6a874a57a5e654b68172aad08dc,8085,000000280852,7,dynamic
              UE0,  mil,208930000000001,{{ USIM_API_K }},opc,{{ OPC }},8000,000000001234,7,dynamic

        - name  : srsLTE configuration - Build srsepc_if_masq.sh file
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/srsepc_if_masq.sh"
            content: |
              #/bin/bash

              ###################################################################
              #
              # This file is part of srsLTE.
              #
              # srsLTE is free software: you can redistribute it and/or modify
              # it under the terms of the GNU Affero General Public License as
              # published by the Free Software Foundation, either version 3 of
              # the License, or (at your option) any later version.
              #
              # srsLTE is distributed in the hope that it will be useful,
              # but WITHOUT ANY WARRANTY; without even the implied warranty of
              # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              # GNU Affero General Public License for more details.
              #
              # A copy of the GNU Affero General Public License can be found in
              # the LICENSE file in the top-level directory of this distribution
              # and at http://www.gnu.org/licenses/.
              #
              ###################################################################

              #Check for sudo rights
              #sudo -v || exit 

              #Check if outbound interface was specified
              if [ ! $# -eq 1 ]
                then
                  echo "Usage :'./if_masq.sh <Interface Name>' "
                  exit
              fi

              echo "Masquerading Interface "$1

              echo 1 | tee /proc/sys/net/ipv4/ip_forward 1>/dev/null
              iptables -t nat -A POSTROUTING -o $1 -j MASQUERADE

        - name  : Add Docker GPG key into apt
          apt_key: url=https://download.docker.com/linux/ubuntu/gpg

        - name  : Add Docker APT repository
          apt_repository:
            repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} edge

        - name  : Update APT
          shell :  |
                sudo apt update

        - name  : Install Docker - CE
          apt   :
            name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
            state: present
            update_cache: yes

        - name  : Stop UE container - If exists
          ignore_errors: true
          shell:  |
                docker stop -t 1 {{ UE_container_name }}

        - name  : Stop ENB container - If exists
          ignore_errors: true
          shell:  |
                docker stop -t 1 {{ ENB_container_name }}

        - name  : Stop epc-srslte container - if exists
          ignore_errors: true
          shell :  |
                docker stop -t 1 {{ EPC_container_name }}    

        - name  : Run doker prune in stoped containers
          ignore_errors: true
          shell :  |
                docker container prune -f

        - name  : Remove epc-srslte image
          ignore_errors: true
          shell:  |
                docker image rm {{ srslte_epc_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove enb-openairsim image
          ignore_errors: true
          shell:  |
                docker image rm {{ oaisim_ue_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove ue-openairsim image
          ignore_errors: true
          shell:  |
                docker image rm {{ oaisim_enb_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove srsLTE docker custom network
          ignore_errors: true
          shell:  |
                docker network rm {{ docker_custom_network_name }}

        - name  : Create Docker srsLTE custom network
          shell:  | 
                docker network create --subnet={{ docker_custom_subnet_network }} --driver bridge {{ docker_custom_network_name }}            

        - name  : Run srsLTE EPC container
          shell : docker run -ti -d --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_EPC }} --name {{ EPC_container_name }} {{ srslte_epc_image_name }} bash 

        - name  : Remove epc.conf default file inside EPC container
          shell : docker exec {{ EPC_container_name }} /bin/sh -c "rm /root/.config/srslte/epc.conf"

        - name  : Remove enb.conf default file inside EPC container
          shell : docker exec {{ EPC_container_name }} /bin/sh -c "rm /root/.config/srslte/enb.conf"

        - name  : Remove user_db.csv default file inside EPC container
          shell : docker exec {{ EPC_container_name }} /bin/sh -c "rm /root/.config/srslte/user_db.csv"
          
        - name  : Copy epc.conf file to EPC container
          shell : |
                docker cp ./epc.conf {{ EPC_container_name }}:/root/.config/srslte/epc.conf
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Copy enb.conf file to EPC container
          shell : |
                docker cp ./enb.conf {{ EPC_container_name }}:/root/.config/srslte/enb.conf
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Copy user_db.csv file to EPC container
          shell : |
                docker cp ./user_db.csv {{ EPC_container_name }}:/root/.config/srslte/user_db.csv
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Copy srsepc_if_masq.sh file to EPC container
          shell : |
                docker cp ./srsepc_if_masq.sh {{ EPC_container_name }}:/srsLTE/srsepc/srsepc_if_masq.sh
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Apply CHMOD +x into srsepc_if_masq.sh file inside EPC container
          shell : docker exec {{ EPC_container_name }} /bin/sh -c "chmod +x srsepc/srsepc_if_masq.sh"

        - name  : Exec EPC container
          shell : docker exec {{ EPC_container_name }} /bin/sh -c "cd /srsLTE/srsepc/ && ./srsepc_if_masq.sh eth0"

## inicializar o EPC AQUI após configurar a ENB + UE


        - name  : Run OpenAirInterface eNB container
          shell : docker run -ti -d --cap-add=NET_ADMIN --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_eNB }} --name {{ ENB_container_name }} {{ oaisim_enb_image_name }} bash 

        - name  : Remove rcc.band7.tm1.nfapi.conf  default file inside eNB Container
          shell : docker exec {{ ENB_container_name }} /bin/sh -c "rm enb/ci-scripts/conf_files/rcc.band7.tm1.nfapi.conf"

        - name  : Copy rcc.band7.tm1.nfapi.conf customized file from instalation dir to eNB Container
          shell : docker cp ./rcc.band7.tm1.nfapi.conf {{ ENB_container_name }}:{{ ENB_folder_name_container_name }}/ci-scripts/conf_files/rcc.band7.tm1.nfapi.conf
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Run OpenAirInterface UE container
          shell : docker run -ti -d --cap-add=NET_ADMIN --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_OAISIM_UE }} --name {{ UE_container_name }} {{ oaisim_ue_image_name }} bash 

        - name  : Remove ue.nfapi.conf default file to UE Container
          shell : docker exec {{ UE_container_name }} /bin/sh -c "rm {{ UE_folder_name_container_name }}/ci-scripts/conf_files/ue.nfapi.conf"

        - name  : Copy ue.nfapi.conf customized file from instalation dir to UE Container
          shell : docker cp ./ue.nfapi.conf {{ UE_container_name }}:/{{ UE_folder_name_container_name }}/ci-scripts/conf_files/ue.nfapi.conf
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Remove ue_eurecom_test_sfr.conf default file to UE Container
          shell : docker exec {{ UE_container_name }} /bin/sh -c "rm {{ UE_folder_name_container_name }}/openair3/NAS/TOOLS/ue_eurecom_test_sfr.conf"

        - name  : Copy ue_eurecom_test_sfr.conf file from instalation dir to UE Container
          shell : docker cp ./ue_eurecom_test_sfr.conf {{ UE_container_name }}:/{{ UE_folder_name_container_name }}/openair3/NAS/TOOLS/ue_eurecom_test_sfr.conf
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Clear file instalation
          shell : rm -rf {{ BASE_DIR_INSTALL }}
          when  : clear_file_instalation == 'true'    